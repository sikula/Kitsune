var search_data = {"index":{"searchIndex":["commandline","manager","exceptions","format","kitsune","checksum","core","database","report","scanner","match","manager","matcher","object","threshold","manager","abort_with_info()","above_min?()","assert()","below_max?()","check_threshold()","checksum_file()","checksum_line()","collect_checksums()","collect_files()","default_database()","default_threshold_value()","float_value?()","format()","format()","load_database()","load_table()","match_all()","match_both()","match_path()","match_version()","match_webapp()","min_threshold_value()","new()","new()","new()","new()","new()","new()","probability()","run_scan()","shortest_common_path()","shortest_common_prefix()","banner"],"longSearchIndex":["commandline","commandline::manager","exceptions","format","kitsune","kitsune::checksum","kitsune::core","kitsune::database","kitsune::report","kitsune::scanner","match","match::manager","matcher","object","threshold","threshold::manager","exceptions#abort_with_info()","threshold::manager#above_min?()","exceptions#assert()","threshold::manager#below_max?()","threshold::manager#check_threshold()","kitsune::checksum::checksum_file()","kitsune::checksum::checksum_line()","kitsune::scanner#collect_checksums()","kitsune::scanner#collect_files()","kitsune::database#default_database()","threshold::manager#default_threshold_value()","threshold::manager#float_value?()","kitsune::report#format()","object::format()","kitsune::database#load_database()","kitsune::database#load_table()","match::manager#match_all()","match::manager#match_both()","match::manager#match_path()","match::manager#match_version()","match::manager#match_webapp()","threshold::manager#min_threshold_value()","commandline::manager::new()","kitsune::database::new()","kitsune::report::new()","kitsune::scanner::new()","match::manager::new()","threshold::manager::new()","match::manager#probability()","kitsune::scanner#run_scan()","match::manager#shortest_common_path()","kitsune::scanner#shortest_common_prefix()",""],"info":[["CommandLine","","CommandLine.html","",""],["CommandLine::Manager","","CommandLine/Manager.html","",""],["Exceptions","","Exceptions.html","",""],["Format","","Format.html","",""],["Kitsune","","Kitsune.html","",""],["Kitsune::Checksum","","Kitsune/Checksum.html","",""],["Kitsune::Core","","Kitsune/Core.html","",""],["Kitsune::Database","","Kitsune/Database.html","",""],["Kitsune::Report","","Kitsune/Report.html","",""],["Kitsune::Scanner","","Kitsune/Scanner.html","",""],["Match","","Match.html","",""],["Match::Manager","","Match/Manager.html","",""],["Matcher","","Matcher.html","",""],["Object","","Object.html","",""],["Threshold","","Threshold.html","",""],["Threshold::Manager","","Threshold/Manager.html","",""],["abort_with_info","Exceptions","Exceptions.html#method-i-abort_with_info","(message)","<p>Public: Exits the program with a formatted output.\n<p>message - Message to be written on exit\n<p>Examples\n"],["above_min?","Threshold::Manager","Threshold/Manager.html#method-i-above_min-3F","()",""],["assert","Exceptions","Exceptions.html#method-i-assert","(error, &block)","<p>Public: Raises an error of a specified type unless a condition is met.\n<p>error - error type block - condition …\n"],["below_max?","Threshold::Manager","Threshold/Manager.html#method-i-below_max-3F","()",""],["check_threshold","Threshold::Manager","Threshold/Manager.html#method-i-check_threshold","()",""],["checksum_file","Kitsune::Checksum","Kitsune/Checksum.html#method-c-checksum_file","(file)","<p>Public: Calculates the checksum of a given file.\n<p>file - path of file to checksum\n<p>Examples\n"],["checksum_line","Kitsune::Checksum","Kitsune/Checksum.html#method-c-checksum_line","(line)","<p>Public: Calculates the checksum of a line.\n<p>line - line to be checksummed\n<p>Examples\n"],["collect_checksums","Kitsune::Scanner","Kitsune/Scanner.html#method-i-collect_checksums","()",""],["collect_files","Kitsune::Scanner","Kitsune/Scanner.html#method-i-collect_files","(directory)","<p>&gt; Helper Functions &lt;=\n"],["default_database","Kitsune::Database","Kitsune/Database.html#method-i-default_database","()","<p>Public: Returns the path to the default database.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">default_database</span>\n<span class=\"ruby-comment\"># =&gt; &quot;/db/webapps.db&quot;</span>\n</pre>\n"],["default_threshold_value","Threshold::Manager","Threshold/Manager.html#method-i-default_threshold_value","()",""],["float_value?","Threshold::Manager","Threshold/Manager.html#method-i-float_value-3F","()","<p>&gt; Helper Functions &lt;=\n"],["format","Kitsune::Report","Kitsune/Report.html#method-i-format","()","<p>Public: Calles the “format” method from a format class.\n<p>Examples\n\n<pre>report = Kitsune::Report.new({}, ...</pre>\n"],["format","Object","Object.html#method-c-format","(input)",""],["load_database","Kitsune::Database","Kitsune/Database.html#method-i-load_database","(database)","<p>Public: Loads a database file.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_DB</span> = <span class=\"ruby-identifier\">load_database</span>(<span class=\"ruby-string\">&quot;/db/webapps.db&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &#39;&#39;</span>\n</pre>\n"],["load_table","Kitsune::Database","Kitsune/Database.html#method-i-load_table","(table_name)","<p>Public: Loads a table from the database.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">_TABLE</span> = <span class=\"ruby-identifier\">load_table</span>(:<span class=\"ruby-identifier\">table_name</span>)\n<span class=\"ruby-comment\"># =&gt; &#39;&#39;</span>\n</pre>\n"],["match_all","Match::Manager","Match/Manager.html#method-i-match_all","()",""],["match_both","Match::Manager","Match/Manager.html#method-i-match_both","(webapp, version)",""],["match_path","Match::Manager","Match/Manager.html#method-i-match_path","(dataset)","<p>&gt; Helper Functions &lt;=\n"],["match_version","Match::Manager","Match/Manager.html#method-i-match_version","(version)",""],["match_webapp","Match::Manager","Match/Manager.html#method-i-match_webapp","(webapp)","<p>&gt; Public Function &lt;=\n"],["min_threshold_value","Threshold::Manager","Threshold/Manager.html#method-i-min_threshold_value","(sample_size)","<p>Calculates the minimum ammount of files to match\n"],["new","CommandLine::Manager","CommandLine/Manager.html#method-c-new","()",""],["new","Kitsune::Database","Kitsune/Database.html#method-c-new","(database)",""],["new","Kitsune::Report","Kitsune/Report.html#method-c-new","(results, options = {})",""],["new","Kitsune::Scanner","Kitsune/Scanner.html#method-c-new","(options = {})",""],["new","Match::Manager","Match/Manager.html#method-c-new","(database: database, threshold: threshold, options: {})",""],["new","Threshold::Manager","Threshold/Manager.html#method-c-new","(threshold)",""],["probability","Match::Manager","Match/Manager.html#method-i-probability","(t, m)","<p>probability forumla\n<p>&gt; param [t]\n\n<pre>total number of files in the set</pre>\n"],["run_scan","Kitsune::Scanner","Kitsune/Scanner.html#method-i-run_scan","()",""],["shortest_common_path","Match::Manager","Match/Manager.html#method-i-shortest_common_path","(dirs)",""],["shortest_common_prefix","Kitsune::Scanner","Kitsune/Scanner.html#method-i-shortest_common_prefix","(dirs, separator = \"/\")",""],["banner","","lib/kitsune/banner.html","","\n<pre>_  ___ _</pre>\n<p>| |/ (_) |_ <em>_</em> _   _ _ __   <em>_</em> | &#39; /| | __/ __| | | |\n&#39;_ \\ / _ \\ | . | | |<em>_</em> \\ |_| | | | …\n"]]}}